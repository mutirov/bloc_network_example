import 'package:bloc_network_example/bloc/user_block.dart';
import 'package:bloc_network_example/bloc/user_state.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

class UserList extends StatelessWidget {
  const UserList({super.key});

  @override
  Widget build(BuildContext context) {
    // BlocBuilder, UserBlock iÃ§indeki durumlarÄ± (State) dinleyerek UI'yi gÃ¼nceller.
    // builder fonksiyonu, state parametresiyle mevcut durumu alÄ±r.
    return BlocBuilder<UserBlock, UserState>(
      builder: (context, state) {
        if (state is UserEmptyState) {
          return Center(child: Text('No data received. Press "Load" button'));
        }
        if (state is UserLoadingState) {
          return Center(child: CircularProgressIndicator());
        }
        if (state is UserLoadedState) {
          return ListView.builder(
            itemCount: state.loadedUser.length,
            itemBuilder: (context, index) => Container(
              color: index % 2 == 0 ? Colors.blue[50] : Colors.blue[100],
              child: ListTile(
                leading: Text(
                  'ID: ${state.loadedUser[index].id}',
                  style: TextStyle(fontSize: 14, fontWeight: FontWeight.bold),
                ),
                title: Column(
                  children: [
                    Text(
                      'Name: ${state.loadedUser[index].name}',
                      style: TextStyle(fontWeight: FontWeight.bold),
                    ),
                    Text(
                      'Email: ${state.loadedUser[index].email ?? ''}',
                      style: TextStyle(fontStyle: FontStyle.italic),
                    ),
                    Text(
                      'Phone: ${state.loadedUser[index].phone ?? ''}',
                      style: TextStyle(fontWeight: FontWeight.bold),
                    ),
                  ],
                ),
              ),
            ),
          );
        }
        if (state is UserErrorState) {
          return Center(child: Text('Error fetching users'));
        }
        // EÄŸer hiÃ§bir duruma uymuyorsa, boÅŸ bir widget (SizedBox.shrink()) dÃ¶ndÃ¼rÃ¼lÃ¼r.
        return SizedBox.shrink();
      },
    );
  }
}
/*
Genel Ã‡alÄ±ÅŸma MantÄ±ÄŸÄ±
ğŸ“Œ BlocBuilder, UserBlock iÃ§inde deÄŸiÅŸen UserState deÄŸerine gÃ¶re UI'yi gÃ¼nceller.
ğŸ“Œ Her State iÃ§in farklÄ± UI bileÅŸenleri gÃ¶sterilir (YÃ¼kleme, hata, listeleme vb.).
ğŸ“Œ Veri baÅŸarÄ±lÄ± gelirse, ListView ile ekranda gÃ¶sterilir.

SonuÃ§
Bu kod, Flutterâ€™da BLoC mimarisi ile durum yÃ¶netimini etkili bir ÅŸekilde kullanÄ±yor. 
KullanÄ±cÄ± listesini dinamik olarak gÃ¼ncelliyor, farklÄ± stateâ€™lere uygun UI gÃ¶steriyor ve modÃ¼ler yapÄ±yÄ± koruyor.
*/